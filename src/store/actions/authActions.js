export const signIn = (credentials) => {
	return (dispatch, getState, { getFirebase }) => {
		//initialize firebase instance (just like axios instance)
		const firebase = getFirebase();
		//signInWithEmailand Password is a function that exist in firebase auth 
		firebase.auth().signInWithEmailAndPassword(
			credentials.email,
			credentials.password

		).then(()=> {
			dispatch({ type :'LOGIN_SUCCESS'});
		}).catch((err) =>{
			dispatch({ type : 'LOGIN_ERROR', err});
		});
	}
}

export const signOut = () => {
	return (dispatch,getState, { getFirebase }) => {

		const firebase = getFirebase();
		firebase.auth().signOut().then(() => {
			dispatch({ type : 'SIGNOUT_SUCCESS'});
		});
	}
}

export const signUp = (newUser) =>{
	return(dispatch, getState,{getFirebase, getFirestore}) =>{
		//i need firebase to created auth status for my user
		const firebase = getFirebase();
		//i need firestore to store this user in a new collection, so as to monitor the info it puts in my app
		const firestore =getFirestore();

		firebase.auth().createUserWithEmailAndPassword(
			newUser.email,
			newUser.password
		).then(resp =>{
			console.log(resp)
			//add method wasnt used here because if i use add, firestore would generate an id for this user, but i want the id for the user to be the same with what firebase generated for me
			//hence i create a document put in the response uid there(generated by firebase) and set some properties for it
			return firestore.collection('users').doc(resp.user.uid).set({
				firstName: newUser.firstName,
				lastName: newUser.lastName,
				initials: newUser.firstName[0] + newUser.lastName[0]
			});
		}).then(()=>{
			dispatch({type: 'SIGNUP_SUCCESS'});
		}).catch((err) =>{
			dispatch({type:'SIGNUP_ERROR', err});
		});
	}
}